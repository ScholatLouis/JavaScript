### 字符编码
字符编码的问题远比想象中的要复杂得多，存在各种各样的编码方式如：ASCII、EASCII、GBK、Big5、unicode、utf8、utf16等等。由于编码方式的不同导致不管是在前端学习还是后台学习，经常遇见的一个问题就是页面乱码，读文件乱码，写数据库乱码等问题。该笔记主要用来说明清除字符编码的发展，以及各编码之间的关系。

#### 几个基本概念
在介绍字符编码之前，我们先来说说接下来会遇到的几个概念。
> 1. 位：计算机的最小单位，二进制中的一位，用二进制的0/1表示  
> 2. 字节：八个位组成一个字节  
> 3. 字符：我们肉眼可见的文字与符号，注意字符和字节是不同概念  
> 4. 字符集：字符的集合  
> 5. 编码：将字符转换层计算机可是别的0/1代码  
> 6. 解码：将计算机表示的0/1编码转换层肉眼可见的字符  

#### 字符编码的起源
在第一代计算机发明的时候就确定了以二进制方式存储数据的基本逻辑，所以我们所见的各种信息要想持久化都必须转换成计算机可是别的二进制编码。所以就必须建立一套字符与二进制对应的关系表，由美国过肩标准协会（American National Standard Institution, ANSI）收集了当时美国所使用的所有字符（128个），通过8位二进制来建立字符和对应的二进制编码关系，从而形成了ASCII码。
> 至于为什么是ANSI规定了ASCII编码对应关系，就是因为计算机是从美国出来的(:  

#### ASCII码
上面说明了ASCII码的由来之后，接着详细介绍下ASCII码。学过计算机变成的应该都知道ASCII码。
> ASCII码一共规定了128个字符的编码，其中包括了32个控制码和96个图形字符。    
> 其中32个控制码，是具有特殊的用途，也称为不可打印字符。这32个字符，一旦终端设备或者打印机遇到这些约定好的字符的时候，就要做一些约定的动作。如遇到0x10，终端就换行；遇到0x07，终端就向人们嘟嘟嘟叫；遇到0x20，终端就空一个空白格。  
> ASCII码128个只需使用7位就可以完整表示，对于最高位(第八位)则统一规定为0。    

具体的ASCII码表如下所示：  
![ASCII](http://static.codeceo.com/images/2015/05/75ad762b7a977b718ef7f519967e65e2.jpg)

#### EASCII码
随着计算机迅速发展并传入了欧洲地区，每个国家都需要对本国语言进行字符与字符对应的二进制进行转换，于是出现了EASCII。EASCII是对ASCII编码的扩展，是将ASCII的最高位利用起来（128-255）之间的数字进行编码，用来表示本国的字符。EASCII编码对应的字符如下图所示：  

![EASCII](http://static.codeceo.com/images/2015/05/f95aaa6eec3f567127af2a0dac01c4a7.jpg)

#### GBK & Big5
当中国开始使用计算机的时候，已经没有可以利用的字节状态来表示汉字了，况且汉字常用的就有6k+个，仅仅使用8位二进制也是远远不够的。于是中国将127之后的奇异符号直接取消，并且规定：一个小于127的字符意义与原来的相同（即ASCII码），但是两个大于127字符连在一起时，就表示一个汉字。前面的一个字节从0xA1(161)用到0xF7（247），后一个字节从从0xA1（161）到0xFE（254）。在这些编码中我们连原来ASCII里本来就有的数字、标点、字母都统统重新编了两个字节长的编码，这就是常说的“全角”字符，而原来的127个ASCII码就叫“半角”字符。这就形成了GB2312。
而对于台湾、香港、澳门等使用繁体字的地区而言，同样需要一套编码表将他们的汉子转换成计算机能够识别的二进制，因此有了Big5字符集。

#### Unicode
随着各个不同语言的国家都使用计算机之后，世界上就存在这各种各样的编码方式。同一个二进制数字可以被解释成不同的符号。因此要想打开一个文件就需要知道它的编码方式，否则用错误的编码方式解读就会出现乱码。如果有一种编码将世界上所有的符号都纳入其中，每一个符号都给予一个独一无二的编码，那么乱码的问题就会消失。这种编码方式叫做：Universal Multiple-Octet Coded Character Set，即UCS，俗称Unicode。
Unicode在制定的时候没有考虑与任何一种编码方式做兼容，因此GBK与UNICODE在汉字的内码编排上完全不一样，没有一种简单的算数方法可以把文本内容从UNICODE编码和另一种编码进行转换，这种转换必须通过查表来进行。
对于UNICODE需要注意：
> Unicode只是一个符号集合，它只规定了符号的二进制代码，却没有规定这个二进制代码应该如何存储  

比如，汉子“严”的Unicode是十六进制数4e25，转换成二进制数足足有15位：100 111 000 100 101，也就是说这个符号表示至少需要2个字节。而对于表示其他更大的符号，可能需要3个字节或者4个字节。因此Unicode会造成以下问题： 
> 如何区别Unicode和ASCII？计算机怎么知道三个字节表示一个符号，而不是分别表示三个符号呢？    
> 我们之前已经知道，英文字母只用一个字节就可以存储，如果统一用Unicode规定，那么每个英文字符用三个或者四个字节表示，泽每个英文字符都必然有两道三个字节全为0，这对于存储是极大的浪费，也会造成文件大小的增加。    

#### UTF8
随着互联网的普及，强烈要求出现一种统一的编码方式，而UTF8就是在互联网上使用最广的Unicode实现方式。其他的Unicode实现方式还有UTF16（字符用两个字节或四个字节表示）和UTF32（字符用四个字节表示），不过UTF16和UTF32在互联网上基本不用。需要强调的是UTF8是Unicode的实现方式之一。

> UTF8最大的一个特点就是，它是变长的编码方式，它可以使用1-4个字节表示一个字符，根据不同的符号而变化长度。UTF8的编码规则如下：  
> 1. 对于单字节的符号，字节的第一位设为0，后面7位为这个符号的Unicode码。因此对于英文字母，UTF8和ASCII编码是相同的。    
> 2.对于n字节的字符(n-1)，第一个字节的前n位都设为1，第n+1位设为0。后面字节的前两位一律设为10，剩下的用来表示这个字符的Unicode码。  

```JavaScript
| Unicode字符范围(十六进制) | UTF8编码方式(二进制) |
| 0000 0000-0000 007F | 0xxxxxxx |
| 0000 0080-0000 07FF | 110xxxxx 10xxxxxx |
| 0000 0800-0000 FFFF | 1110xxxx 10xxxxxx 10xxxxxx |
| 0001 0000-0010 FFFF | 11110xxx 10xxxxxx 10xxxxxx 10xxxxxx |
```

根据上表，解读UTF8编码非常简单。如果一个字节的第一位是0，泽这个字节单独就是一个字符；如果第一位是1，则连续有多少个1就表示当前字符占用多少个字节。下面我们通过汉字“严”进行说明：
> “严”字的Unicode是4E25(100 111 000 100 101)，根据上表，可以知道4E25处在第三行的范围中，因此“严”字的UTF8编码需要使用三个字节即格式：`1110xxxx 10xxxxxx 10xxxxxx`。然后将“严“字的二进制依次添入，得到的结果为：`11100100 10111000 10100101`，转换层十六进制就是E4B8A5，注意不足的要在高位补零。

#### 后续文章
[Unicode与JavaScript]()  
[编码与HTML页面]()

### 参考文章
[1] http://www.ruanyifeng.com/blog/2007/10/ascii_unicode_and_utf-8.html   
[2] http://www.ruanyifeng.com/blog/2014/12/unicode.html   
[3] https://blog.imdst.com/zi-fu-bian-jie-ma-de-gu-shi-asciiansiunicodeutf-8qu-bie/     
[4] https://my.oschina.net/alphajay/blog/5689    
[5] http://zkread.com/article/445187.html    
[6] http://guochenglai.com/2016/06/03/coding-history/    
[7] http://hustcalm.me/blog/2013/04/06/che-di-gao-dong-zi-fu-ji-he-zi-fu-bian-ma-cooked-from-other-posts/  
[8] http://www.ruanyifeng.com/blog/2008/05/growth_of_utf-8_on_the_web.html  
[9] https://www.joelonsoftware.com/2003/10/08/the-absolute-minimum-every-software-developer-absolutely-positively-must-know-about-unicode-and-character-sets-no-excuses/  
